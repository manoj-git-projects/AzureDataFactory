{
	"name": "df_transform_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "df_raw_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathsSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "FilterEuropeRecordsOnly"
				},
				{
					"name": "SelectOnlyRequiredFields"
				},
				{
					"name": "PivotCounts"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          country_code as string,",
				"          continent as string,",
				"          population as integer,",
				"          indicator as string,",
				"          weekly_count as integer,",
				"          year_week as string,",
				"          rate_14_day as string,",
				"          cumulative_count as integer,",
				"          source as string,",
				"          note as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesAndDeathsSource",
				"CasesAndDeathsSource filter(continent == 'Europe' && not(isNull(country_code))) ~> FilterEuropeRecordsOnly",
				"FilterEuropeRecordsOnly select(mapColumn(",
				"          country,",
				"          country_code,",
				"          population,",
				"          indicator,",
				"          weekly_count,",
				"          year_week,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectOnlyRequiredFields",
				"SelectOnlyRequiredFields pivot(groupBy(country,",
				"          country_code,",
				"          population,",
				"          year_week,",
				"          source),",
				"     pivotBy(indicator, ['confirmed cases', 'deaths']),",
				"     count_ = sum(weekly_count),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> PivotCounts",
				"PivotCounts sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesAndDeathsSink"
			]
		}
	}
}